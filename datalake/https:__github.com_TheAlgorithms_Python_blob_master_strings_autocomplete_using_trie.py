<body>
 from __future__ import annotations END = "#" class Trie: def __init__(self) -&gt; None: self._trie: dict = {} def insert_word(self, text: str) -&gt; None: trie = self._trie for char in text: if char not in trie: trie[char] = {} trie = trie[char] trie[END] = True def find_word(self, prefix: str) -&gt; tuple | list: trie = self._trie for char in prefix: if char in trie: trie = trie[char] else: return [] return self._elements(trie) def _elements(self, d: dict) -&gt; tuple: result = [] for c, v in d.items(): sub_result = [" "] if c == END else [(c + s) for s in self._elements(v)] result.extend(sub_result) return tuple(result) trie = Trie() words = ("depart", "detergent", "daring", "dog", "deer", "deal") for word in words: trie.insert_word(word) def autocomplete_using_trie(string: str) -&gt; tuple: """ &gt;&gt;&gt; trie = Trie() &gt;&gt;&gt; for word in words: ... trie.insert_word(word) ... &gt;&gt;&gt; matches = autocomplete_using_trie("de") &gt;&gt;&gt; "detergent " in matches True &gt;&gt;&gt; "dog " in matches False """ suffixes = trie.find_word(string) return tuple(string + word for word in suffixes) def main() -&gt; None: print(autocomplete_using_trie("de")) if __name__ == "__main__": import doctest doctest.testmod() main()
</body>
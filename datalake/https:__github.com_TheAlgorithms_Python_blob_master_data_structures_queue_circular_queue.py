<body>
 # Implementation of Circular Queue (using Python lists) class CircularQueue: """Circular FIFO queue with a fixed capacity""" def __init__(self, n: int): self.n = n self.array = [None] * self.n self.front = 0 # index of the first element self.rear = 0 self.size = 0 def __len__(self) -&gt; int: """ &gt;&gt;&gt; cq = CircularQueue(5) &gt;&gt;&gt; len(cq) 0 &gt;&gt;&gt; cq.enqueue("A") # doctest: +ELLIPSIS <data_structures.queue.circular_queue.circularqueue object at ...>
  &gt;&gt; len(cq) 1 """ return self.size def is_empty(self) -&gt; bool: """ Checks whether the queue is empty or not &gt;&gt;&gt; cq = CircularQueue(5) &gt;&gt;&gt; cq.is_empty() True &gt;&gt;&gt; cq.enqueue("A").is_empty() False """ return self.size == 0 def first(self): """ Returns the first element of the queue &gt;&gt;&gt; cq = CircularQueue(5) &gt;&gt;&gt; cq.first() False &gt;&gt;&gt; cq.enqueue("A").first() 'A' """ return False if self.is_empty() else self.array[self.front] def enqueue(self, data): """ This function inserts an element at the end of the queue using self.rear value as an index. &gt;&gt;&gt; cq = CircularQueue(5) &gt;&gt;&gt; cq.enqueue("A") # doctest: +ELLIPSIS 
  <data_structures.queue.circular_queue.circularqueue object at ...>
   &gt;&gt; (cq.size, cq.first()) (1, 'A') &gt;&gt;&gt; cq.enqueue("B") # doctest: +ELLIPSIS 
   <data_structures.queue.circular_queue.circularqueue object at ...>
    &gt;&gt; (cq.size, cq.first()) (2, 'A') """ if self.size &gt;= self.n: raise Exception("QUEUE IS FULL") self.array[self.rear] = data self.rear = (self.rear + 1) % self.n self.size += 1 return self def dequeue(self): """ This function removes an element from the queue using on self.front value as an index and returns it &gt;&gt;&gt; cq = CircularQueue(5) &gt;&gt;&gt; cq.dequeue() Traceback (most recent call last): ... Exception: UNDERFLOW &gt;&gt;&gt; cq.enqueue("A").enqueue("B").dequeue() 'A' &gt;&gt;&gt; (cq.size, cq.first()) (1, 'B') &gt;&gt;&gt; cq.dequeue() 'B' &gt;&gt;&gt; cq.dequeue() Traceback (most recent call last): ... Exception: UNDERFLOW """ if self.size == 0: raise Exception("UNDERFLOW") temp = self.array[self.front] self.array[self.front] = None self.front = (self.front + 1) % self.n self.size -= 1 return temp
   </data_structures.queue.circular_queue.circularqueue>
  </data_structures.queue.circular_queue.circularqueue>
 </data_structures.queue.circular_queue.circularqueue>
</body>
<body>
 """ In a binary search tree (BST): * The floor of key 'k' is the maximum value that is smaller than or equal to 'k'. * The ceiling of key 'k' is the minimum value that is greater than or equal to 'k'. Reference: https://bit.ly/46uB0a2 Author : Arunkumar Date : 14th October 2023 """ from __future__ import annotations from collections.abc import Iterator from dataclasses import dataclass @dataclass class Node: key: int left: Node | None = None right: Node | None = None def __iter__(self) -&gt; Iterator[int]: if self.left: yield from self.left yield self.key if self.right: yield from self.right def __len__(self) -&gt; int: return sum(1 for _ in self) def floor_ceiling(root: Node | None, key: int) -&gt; tuple[int | None, int | None]: """ Find the floor and ceiling values for a given key in a Binary Search Tree (BST). Args: root: The root of the binary search tree. key: The key for which to find the floor and ceiling. Returns: A tuple containing the floor and ceiling values, respectively. Examples: &gt;&gt;&gt; root = Node(10) &gt;&gt;&gt; root.left = Node(5) &gt;&gt;&gt; root.right = Node(20) &gt;&gt;&gt; root.left.left = Node(3) &gt;&gt;&gt; root.left.right = Node(7) &gt;&gt;&gt; root.right.left = Node(15) &gt;&gt;&gt; root.right.right = Node(25) &gt;&gt;&gt; tuple(root) (3, 5, 7, 10, 15, 20, 25) &gt;&gt;&gt; floor_ceiling(root, 8) (7, 10) &gt;&gt;&gt; floor_ceiling(root, 14) (10, 15) &gt;&gt;&gt; floor_ceiling(root, -1) (None, 3) &gt;&gt;&gt; floor_ceiling(root, 30) (25, None) """ floor_val = None ceiling_val = None while root: if root.key == key: floor_val = root.key ceiling_val = root.key break if key &lt; root.key: ceiling_val = root.key root = root.left else: floor_val = root.key root = root.right return floor_val, ceiling_val if __name__ == "__main__": import doctest doctest.testmod()
</body>
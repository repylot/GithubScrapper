<body>
 """Queue represented by a Python list""" from collections.abc import Iterable from typing import Generic, TypeVar _T = TypeVar("_T") class QueueByList(Generic[_T]): def __init__(self, iterable: Iterable[_T] | None = None) -&gt; None: """ &gt;&gt;&gt; QueueByList() Queue(()) &gt;&gt;&gt; QueueByList([10, 20, 30]) Queue((10, 20, 30)) &gt;&gt;&gt; QueueByList((i**2 for i in range(1, 4))) Queue((1, 4, 9)) """ self.entries: list[_T] = list(iterable or []) def __len__(self) -&gt; int: """ &gt;&gt;&gt; len(QueueByList()) 0 &gt;&gt;&gt; from string import ascii_lowercase &gt;&gt;&gt; len(QueueByList(ascii_lowercase)) 26 &gt;&gt;&gt; queue = QueueByList() &gt;&gt;&gt; for i in range(1, 11): ... queue.put(i) &gt;&gt;&gt; len(queue) 10 &gt;&gt;&gt; for i in range(2): ... queue.get() 1 2 &gt;&gt;&gt; len(queue) 8 """ return len(self.entries) def __repr__(self) -&gt; str: """ &gt;&gt;&gt; queue = QueueByList() &gt;&gt;&gt; queue Queue(()) &gt;&gt;&gt; str(queue) 'Queue(())' &gt;&gt;&gt; queue.put(10) &gt;&gt;&gt; queue Queue((10,)) &gt;&gt;&gt; queue.put(20) &gt;&gt;&gt; queue.put(30) &gt;&gt;&gt; queue Queue((10, 20, 30)) """ return f"Queue({tuple(self.entries)})" def put(self, item: _T) -&gt; None: """Put `item` to the Queue &gt;&gt;&gt; queue = QueueByList() &gt;&gt;&gt; queue.put(10) &gt;&gt;&gt; queue.put(20) &gt;&gt;&gt; len(queue) 2 &gt;&gt;&gt; queue Queue((10, 20)) """ self.entries.append(item) def get(self) -&gt; _T: """ Get `item` from the Queue &gt;&gt;&gt; queue = QueueByList((10, 20, 30)) &gt;&gt;&gt; queue.get() 10 &gt;&gt;&gt; queue.put(40) &gt;&gt;&gt; queue.get() 20 &gt;&gt;&gt; queue.get() 30 &gt;&gt;&gt; len(queue) 1 &gt;&gt;&gt; queue.get() 40 &gt;&gt;&gt; queue.get() Traceback (most recent call last): ... IndexError: Queue is empty """ if not self.entries: raise IndexError("Queue is empty") return self.entries.pop(0) def rotate(self, rotation: int) -&gt; None: """Rotate the items of the Queue `rotation` times &gt;&gt;&gt; queue = QueueByList([10, 20, 30, 40]) &gt;&gt;&gt; queue Queue((10, 20, 30, 40)) &gt;&gt;&gt; queue.rotate(1) &gt;&gt;&gt; queue Queue((20, 30, 40, 10)) &gt;&gt;&gt; queue.rotate(2) &gt;&gt;&gt; queue Queue((40, 10, 20, 30)) """ put = self.entries.append get = self.entries.pop for _ in range(rotation): put(get(0)) def get_front(self) -&gt; _T: """Get the front item from the Queue &gt;&gt;&gt; queue = QueueByList((10, 20, 30)) &gt;&gt;&gt; queue.get_front() 10 &gt;&gt;&gt; queue Queue((10, 20, 30)) &gt;&gt;&gt; queue.get() 10 &gt;&gt;&gt; queue.get_front() 20 """ return self.entries[0] if __name__ == "__main__": from doctest import testmod testmod()
</body>
<body>
 #!/usr/bin/python """Author: OMKAR PATHAK""" class Graph: def __init__(self): self.vertex = {} # for printing the Graph vertices def print_graph(self) -&gt; None: """ Print the graph vertices. Example: &gt;&gt;&gt; g = Graph() &gt;&gt;&gt; g.add_edge(0, 1) &gt;&gt;&gt; g.add_edge(0, 2) &gt;&gt;&gt; g.add_edge(1, 2) &gt;&gt;&gt; g.add_edge(2, 0) &gt;&gt;&gt; g.add_edge(2, 3) &gt;&gt;&gt; g.add_edge(3, 3) &gt;&gt;&gt; g.print_graph() {0: [1, 2], 1: [2], 2: [0, 3], 3: [3]} 0 -&gt; 1 -&gt; 2 1 -&gt; 2 2 -&gt; 0 -&gt; 3 3 -&gt; 3 """ print(self.vertex) for i in self.vertex: print(i, " -&gt; ", " -&gt; ".join([str(j) for j in self.vertex[i]])) # for adding the edge between two vertices def add_edge(self, from_vertex: int, to_vertex: int) -&gt; None: """ Add an edge between two vertices. :param from_vertex: The source vertex. :param to_vertex: The destination vertex. Example: &gt;&gt;&gt; g = Graph() &gt;&gt;&gt; g.add_edge(0, 1) &gt;&gt;&gt; g.add_edge(0, 2) &gt;&gt;&gt; g.print_graph() {0: [1, 2]} 0 -&gt; 1 -&gt; 2 """ # check if vertex is already present, if from_vertex in self.vertex: self.vertex[from_vertex].append(to_vertex) else: # else make a new vertex self.vertex[from_vertex] = [to_vertex] def dfs(self) -&gt; None: """ Perform depth-first search (DFS) traversal on the graph and print the visited vertices. Example: &gt;&gt;&gt; g = Graph() &gt;&gt;&gt; g.add_edge(0, 1) &gt;&gt;&gt; g.add_edge(0, 2) &gt;&gt;&gt; g.add_edge(1, 2) &gt;&gt;&gt; g.add_edge(2, 0) &gt;&gt;&gt; g.add_edge(2, 3) &gt;&gt;&gt; g.add_edge(3, 3) &gt;&gt;&gt; g.dfs() 0 1 2 3 """ # visited array for storing already visited nodes visited = [False] * len(self.vertex) # call the recursive helper function for i in range(len(self.vertex)): if not visited[i]: self.dfs_recursive(i, visited) def dfs_recursive(self, start_vertex: int, visited: list) -&gt; None: """ Perform a recursive depth-first search (DFS) traversal on the graph. :param start_vertex: The starting vertex for the traversal. :param visited: A list to track visited vertices. Example: &gt;&gt;&gt; g = Graph() &gt;&gt;&gt; g.add_edge(0, 1) &gt;&gt;&gt; g.add_edge(0, 2) &gt;&gt;&gt; g.add_edge(1, 2) &gt;&gt;&gt; g.add_edge(2, 0) &gt;&gt;&gt; g.add_edge(2, 3) &gt;&gt;&gt; g.add_edge(3, 3) &gt;&gt;&gt; visited = [False] * len(g.vertex) &gt;&gt;&gt; g.dfs_recursive(0, visited) 0 1 2 3 """ # mark start vertex as visited visited[start_vertex] = True print(start_vertex, end="") # Recur for all the vertices that are adjacent to this node for i in self.vertex: if not visited[i]: print(" ", end="") self.dfs_recursive(i, visited) if __name__ == "__main__": import doctest doctest.testmod() g = Graph() g.add_edge(0, 1) g.add_edge(0, 2) g.add_edge(1, 2) g.add_edge(2, 0) g.add_edge(2, 3) g.add_edge(3, 3) g.print_graph() print("DFS:") g.dfs()
</body>
<body>
 """A Queue using a linked list like structure""" from __future__ import annotations from collections.abc import Iterator from typing import Any class Node: def __init__(self, data: Any) -&gt; None: self.data: Any = data self.next: Node | None = None def __str__(self) -&gt; str: return f"{self.data}" class LinkedQueue: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; queue.is_empty() True &gt;&gt;&gt; queue.put(5) &gt;&gt;&gt; queue.put(9) &gt;&gt;&gt; queue.put('python') &gt;&gt;&gt; queue.is_empty() False &gt;&gt;&gt; queue.get() 5 &gt;&gt;&gt; queue.put('algorithms') &gt;&gt;&gt; queue.get() 9 &gt;&gt;&gt; queue.get() 'python' &gt;&gt;&gt; queue.get() 'algorithms' &gt;&gt;&gt; queue.is_empty() True &gt;&gt;&gt; queue.get() Traceback (most recent call last): ... IndexError: dequeue from empty queue """ def __init__(self) -&gt; None: self.front: Node | None = None self.rear: Node | None = None def __iter__(self) -&gt; Iterator[Any]: node = self.front while node: yield node.data node = node.next def __len__(self) -&gt; int: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; for i in range(1, 6): ... queue.put(i) &gt;&gt;&gt; len(queue) 5 &gt;&gt;&gt; for i in range(1, 6): ... assert len(queue) == 6 - i ... _ = queue.get() &gt;&gt;&gt; len(queue) 0 """ return len(tuple(iter(self))) def __str__(self) -&gt; str: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; for i in range(1, 4): ... queue.put(i) &gt;&gt;&gt; queue.put("Python") &gt;&gt;&gt; queue.put(3.14) &gt;&gt;&gt; queue.put(True) &gt;&gt;&gt; str(queue) '1 &lt;- 2 &lt;- 3 &lt;- Python &lt;- 3.14 &lt;- True' """ return " &lt;- ".join(str(item) for item in self) def is_empty(self) -&gt; bool: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; queue.is_empty() True &gt;&gt;&gt; for i in range(1, 6): ... queue.put(i) &gt;&gt;&gt; queue.is_empty() False """ return len(self) == 0 def put(self, item: Any) -&gt; None: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; queue.get() Traceback (most recent call last): ... IndexError: dequeue from empty queue &gt;&gt;&gt; for i in range(1, 6): ... queue.put(i) &gt;&gt;&gt; str(queue) '1 &lt;- 2 &lt;- 3 &lt;- 4 &lt;- 5' """ node = Node(item) if self.is_empty(): self.front = self.rear = node else: assert isinstance(self.rear, Node) self.rear.next = node self.rear = node def get(self) -&gt; Any: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; queue.get() Traceback (most recent call last): ... IndexError: dequeue from empty queue &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; for i in range(1, 6): ... queue.put(i) &gt;&gt;&gt; for i in range(1, 6): ... assert queue.get() == i &gt;&gt;&gt; len(queue) 0 """ if self.is_empty(): raise IndexError("dequeue from empty queue") assert isinstance(self.front, Node) node = self.front self.front = self.front.next if self.front is None: self.rear = None return node.data def clear(self) -&gt; None: """ &gt;&gt;&gt; queue = LinkedQueue() &gt;&gt;&gt; for i in range(1, 6): ... queue.put(i) &gt;&gt;&gt; queue.clear() &gt;&gt;&gt; len(queue) 0 &gt;&gt;&gt; str(queue) '' """ self.front = self.rear = None if __name__ == "__main__": from doctest import testmod testmod()
</body>
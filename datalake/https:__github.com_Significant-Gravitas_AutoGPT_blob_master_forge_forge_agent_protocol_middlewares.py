<body>
 from starlette.types import ASGIApp class AgentMiddleware: """ Middleware that injects the agent instance into the request scope. """ def __init__(self, app: ASGIApp, agent): """ Args: app: The FastAPI app - automatically injected by FastAPI. agent: The agent instance to inject into the request scope. Examples: &gt;&gt;&gt; from fastapi import FastAPI, Request &gt;&gt;&gt; from agent_protocol.agent import Agent &gt;&gt;&gt; from agent_protocol.middlewares import AgentMiddleware &gt;&gt;&gt; app = FastAPI() &gt;&gt;&gt; @app.get("/") &gt;&gt;&gt; async def root(request: Request): &gt;&gt;&gt; agent = request["agent"] &gt;&gt;&gt; task = agent.db.create_task("Do something.") &gt;&gt;&gt; return {"task_id": a.task_id} &gt;&gt;&gt; agent = Agent() &gt;&gt;&gt; app.add_middleware(AgentMiddleware, agent=agent) """ self.app = app self.agent = agent async def __call__(self, scope, receive, send): scope["agent"] = self.agent await self.app(scope, receive, send)
</body>
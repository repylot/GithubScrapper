<body>
 #!/usr/bin/env python3 from __future__ import annotations from collections.abc import Iterable, Iterator from typing import Any, Generic, TypeVar T = TypeVar("T", bound=bool) class SkewNode(Generic[T]): """ One node of the skew heap. Contains the value and references to two children. """ def __init__(self, value: T) -&gt; None: self._value: T = value self.left: SkewNode[T] | None = None self.right: SkewNode[T] | None = None @property def value(self) -&gt; T: """ Return the value of the node. &gt;&gt;&gt; SkewNode(0).value 0 &gt;&gt;&gt; SkewNode(3.14159).value 3.14159 &gt;&gt;&gt; SkewNode("hello").value 'hello' &gt;&gt;&gt; SkewNode(None).value &gt;&gt;&gt; SkewNode(True).value True &gt;&gt;&gt; SkewNode([]).value [] &gt;&gt;&gt; SkewNode({}).value {} &gt;&gt;&gt; SkewNode(set()).value set() &gt;&gt;&gt; SkewNode(0.0).value 0.0 &gt;&gt;&gt; SkewNode(-1e-10).value -1e-10 &gt;&gt;&gt; SkewNode(10).value 10 &gt;&gt;&gt; SkewNode(-10.5).value -10.5 &gt;&gt;&gt; SkewNode().value Traceback (most recent call last): ... TypeError: SkewNode.__init__() missing 1 required positional argument: 'value' """ return self._value @staticmethod def merge( root1: SkewNode[T] | None, root2: SkewNode[T] | None ) -&gt; SkewNode[T] | None: """ Merge 2 nodes together. &gt;&gt;&gt; SkewNode.merge(SkewNode(10),SkewNode(-10.5)).value -10.5 &gt;&gt;&gt; SkewNode.merge(SkewNode(10),SkewNode(10.5)).value 10 &gt;&gt;&gt; SkewNode.merge(SkewNode(10),SkewNode(10)).value 10 &gt;&gt;&gt; SkewNode.merge(SkewNode(-100),SkewNode(-10.5)).value -100 """ if not root1: return root2 if not root2: return root1 if root1.value &gt; root2.value: root1, root2 = root2, root1 result = root1 temp = root1.right result.right = root1.left result.left = SkewNode.merge(temp, root2) return result class SkewHeap(Generic[T]): """ A data structure that allows inserting a new value and to pop the smallest values. Both operations take O(logN) time where N is the size of the structure. Wiki: https://en.wikipedia.org/wiki/Skew_heap Visualization: https://www.cs.usfca.edu/~galles/visualization/SkewHeap.html &gt;&gt;&gt; list(SkewHeap([2, 3, 1, 5, 1, 7])) [1, 1, 2, 3, 5, 7] &gt;&gt;&gt; sh = SkewHeap() &gt;&gt;&gt; sh.pop() Traceback (most recent call last): ... IndexError: Can't get top element for the empty heap. &gt;&gt;&gt; sh.insert(1) &gt;&gt;&gt; sh.insert(-1) &gt;&gt;&gt; sh.insert(0) &gt;&gt;&gt; list(sh) [-1, 0, 1] """ def __init__(self, data: Iterable[T] | None = ()) -&gt; None: """ &gt;&gt;&gt; sh = SkewHeap([3, 1, 3, 7]) &gt;&gt;&gt; list(sh) [1, 3, 3, 7] """ self._root: SkewNode[T] | None = None if data: for item in data: self.insert(item) def __bool__(self) -&gt; bool: """ Check if the heap is not empty. &gt;&gt;&gt; sh = SkewHeap() &gt;&gt;&gt; bool(sh) False &gt;&gt;&gt; sh.insert(1) &gt;&gt;&gt; bool(sh) True &gt;&gt;&gt; sh.clear() &gt;&gt;&gt; bool(sh) False """ return self._root is not None def __iter__(self) -&gt; Iterator[T]: """ Returns sorted list containing all the values in the heap. &gt;&gt;&gt; sh = SkewHeap([3, 1, 3, 7]) &gt;&gt;&gt; list(sh) [1, 3, 3, 7] """ result: list[Any] = [] while self: result.append(self.pop()) # Pushing items back to the heap not to clear it. for item in result: self.insert(item) return iter(result) def insert(self, value: T) -&gt; None: """ Insert the value into the heap. &gt;&gt;&gt; sh = SkewHeap() &gt;&gt;&gt; sh.insert(3) &gt;&gt;&gt; sh.insert(1) &gt;&gt;&gt; sh.insert(3) &gt;&gt;&gt; sh.insert(7) &gt;&gt;&gt; list(sh) [1, 3, 3, 7] """ self._root = SkewNode.merge(self._root, SkewNode(value)) def pop(self) -&gt; T | None: """ Pop the smallest value from the heap and return it. &gt;&gt;&gt; sh = SkewHeap([3, 1, 3, 7]) &gt;&gt;&gt; sh.pop() 1 &gt;&gt;&gt; sh.pop() 3 &gt;&gt;&gt; sh.pop() 3 &gt;&gt;&gt; sh.pop() 7 &gt;&gt;&gt; sh.pop() Traceback (most recent call last): ... IndexError: Can't get top element for the empty heap. """ result = self.top() self._root = ( SkewNode.merge(self._root.left, self._root.right) if self._root else None ) return result def top(self) -&gt; T: """ Return the smallest value from the heap. &gt;&gt;&gt; sh = SkewHeap() &gt;&gt;&gt; sh.insert(3) &gt;&gt;&gt; sh.top() 3 &gt;&gt;&gt; sh.insert(1) &gt;&gt;&gt; sh.top() 1 &gt;&gt;&gt; sh.insert(3) &gt;&gt;&gt; sh.top() 1 &gt;&gt;&gt; sh.insert(7) &gt;&gt;&gt; sh.top() 1 """ if not self._root: raise IndexError("Can't get top element for the empty heap.") return self._root.value def clear(self) -&gt; None: """ Clear the heap. &gt;&gt;&gt; sh = SkewHeap([3, 1, 3, 7]) &gt;&gt;&gt; sh.clear() &gt;&gt;&gt; sh.pop() Traceback (most recent call last): ... IndexError: Can't get top element for the empty heap. """ self._root = None if __name__ == "__main__": import doctest doctest.testmod()
</body>
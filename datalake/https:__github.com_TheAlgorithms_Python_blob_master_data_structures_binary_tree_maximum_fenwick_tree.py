<body>
 class MaxFenwickTree: """ Maximum Fenwick Tree More info: https://cp-algorithms.com/data_structures/fenwick.html --------- &gt;&gt;&gt; ft = MaxFenwickTree(5) &gt;&gt;&gt; ft.query(0, 5) 0 &gt;&gt;&gt; ft.update(4, 100) &gt;&gt;&gt; ft.query(0, 5) 100 &gt;&gt;&gt; ft.update(4, 0) &gt;&gt;&gt; ft.update(2, 20) &gt;&gt;&gt; ft.query(0, 5) 20 &gt;&gt;&gt; ft.update(4, 10) &gt;&gt;&gt; ft.query(2, 5) 20 &gt;&gt;&gt; ft.query(1, 5) 20 &gt;&gt;&gt; ft.update(2, 0) &gt;&gt;&gt; ft.query(0, 5) 10 &gt;&gt;&gt; ft = MaxFenwickTree(10000) &gt;&gt;&gt; ft.update(255, 30) &gt;&gt;&gt; ft.query(0, 10000) 30 &gt;&gt;&gt; ft = MaxFenwickTree(6) &gt;&gt;&gt; ft.update(5, 1) &gt;&gt;&gt; ft.query(5, 6) 1 &gt;&gt;&gt; ft = MaxFenwickTree(6) &gt;&gt;&gt; ft.update(0, 1000) &gt;&gt;&gt; ft.query(0, 1) 1000 """ def __init__(self, size: int) -&gt; None: """ Create empty Maximum Fenwick Tree with specified size Parameters: size: size of Array Returns: None """ self.size = size self.arr = [0] * size self.tree = [0] * size @staticmethod def get_next(index: int) -&gt; int: """ Get next index in O(1) """ return index | (index + 1) @staticmethod def get_prev(index: int) -&gt; int: """ Get previous index in O(1) """ return (index &amp; (index + 1)) - 1 def update(self, index: int, value: int) -&gt; None: """ Set index to value in O(lg^2 N) Parameters: index: index to update value: value to set Returns: None """ self.arr[index] = value while index &lt; self.size: current_left_border = self.get_prev(index) + 1 if current_left_border == index: self.tree[index] = value else: self.tree[index] = max(value, current_left_border, index) index = self.get_next(index) def query(self, left: int, right: int) -&gt; int: """ Answer the query of maximum range [l, r) in O(lg^2 N) Parameters: left: left index of query range (inclusive) right: right index of query range (exclusive) Returns: Maximum value of range [left, right) """ right -= 1 # Because of right is exclusive result = 0 while left &lt;= right: current_left = self.get_prev(right) if left &lt;= current_left: result = max(result, self.tree[right]) right = current_left else: result = max(result, self.arr[right]) right -= 1 return result if __name__ == "__main__": import doctest doctest.testmod()
</body>
<body>
 """Queue implementation using two stacks""" from collections.abc import Iterable from typing import Generic, TypeVar _T = TypeVar("_T") class QueueByTwoStacks(Generic[_T]): def __init__(self, iterable: Iterable[_T] | None = None) -&gt; None: """ &gt;&gt;&gt; QueueByTwoStacks() Queue(()) &gt;&gt;&gt; QueueByTwoStacks([10, 20, 30]) Queue((10, 20, 30)) &gt;&gt;&gt; QueueByTwoStacks((i**2 for i in range(1, 4))) Queue((1, 4, 9)) """ self._stack1: list[_T] = list(iterable or []) self._stack2: list[_T] = [] def __len__(self) -&gt; int: """ &gt;&gt;&gt; len(QueueByTwoStacks()) 0 &gt;&gt;&gt; from string import ascii_lowercase &gt;&gt;&gt; len(QueueByTwoStacks(ascii_lowercase)) 26 &gt;&gt;&gt; queue = QueueByTwoStacks() &gt;&gt;&gt; for i in range(1, 11): ... queue.put(i) ... &gt;&gt;&gt; len(queue) 10 &gt;&gt;&gt; for i in range(2): ... queue.get() 1 2 &gt;&gt;&gt; len(queue) 8 """ return len(self._stack1) + len(self._stack2) def __repr__(self) -&gt; str: """ &gt;&gt;&gt; queue = QueueByTwoStacks() &gt;&gt;&gt; queue Queue(()) &gt;&gt;&gt; str(queue) 'Queue(())' &gt;&gt;&gt; queue.put(10) &gt;&gt;&gt; queue Queue((10,)) &gt;&gt;&gt; queue.put(20) &gt;&gt;&gt; queue.put(30) &gt;&gt;&gt; queue Queue((10, 20, 30)) """ return f"Queue({tuple(self._stack2[::-1] + self._stack1)})" def put(self, item: _T) -&gt; None: """ Put `item` into the Queue &gt;&gt;&gt; queue = QueueByTwoStacks() &gt;&gt;&gt; queue.put(10) &gt;&gt;&gt; queue.put(20) &gt;&gt;&gt; len(queue) 2 &gt;&gt;&gt; queue Queue((10, 20)) """ self._stack1.append(item) def get(self) -&gt; _T: """ Get `item` from the Queue &gt;&gt;&gt; queue = QueueByTwoStacks((10, 20, 30)) &gt;&gt;&gt; queue.get() 10 &gt;&gt;&gt; queue.put(40) &gt;&gt;&gt; queue.get() 20 &gt;&gt;&gt; queue.get() 30 &gt;&gt;&gt; len(queue) 1 &gt;&gt;&gt; queue.get() 40 &gt;&gt;&gt; queue.get() Traceback (most recent call last): ... IndexError: Queue is empty """ # To reduce number of attribute look-ups in `while` loop. stack1_pop = self._stack1.pop stack2_append = self._stack2.append if not self._stack2: while self._stack1: stack2_append(stack1_pop()) if not self._stack2: raise IndexError("Queue is empty") return self._stack2.pop() if __name__ == "__main__": from doctest import testmod testmod()
</body>